#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 25, 2018 11:25:28 PM IST  platform: Windows NT

import sys
import os, datetime, xlrd, playsound
from threading import Thread

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import test1_support

def getData(fileLocation):
    
    workbook = xlrd.open_workbook(fileLocation)
    sheet = workbook.sheet_by_index(0)
    data = [[sheet.cell_value(r,c) for c in range(sheet.ncols)] for r in range(1,sheet.nrows)]
    return data

def diff_times_in_seconds(t1, t2):
    # caveat emptor - assumes t1 & t2 are python times, on the same day and t2 is after t1
    h1, m1, s1 = t1.hour, t1.minute, t1.second
    h2, m2, s2 = t2.hour, t2.minute, t2.second
    t1_secs = s1 + 60 * (m1 + 60*h1)
    t2_secs = s2 + 60 * (m2 + 60*h2)
    return( t2_secs - t1_secs)

def playy():
    playsound.playsound("Buzz.mp3")



def vp_start_gui():
    '''Starting point when module is the main routine.'''
    # fetching the data from the Excel file
    file = os.path.abspath('') + "\\schedule.xlsx"
    
    # data received in 2D format
    schedule = getData(file)
    
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (schedule, root)
    #test1_support.init(root, top)
    root.mainloop()
    print(top.dataBase)

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    test1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, schedule, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family Calibri -size 12 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"
        font11 = "-family {Copperplate Gothic Light} -size 14 -weight "  \
            "bold -slant italic -underline 0 -overstrike 0"
        font12 = "-family {Comic Sans MS} -size 12 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font13 = "-family {@Malgun Gothic} -size 12 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI Black} -size 14 -weight bold -slant"  \
            " roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x550+436+177")
        top.title("Event Notifier")
        top.configure(background="#d9d9d9")

        self.schedule = schedule

        self.Notifier = ttk.Frame(top)
        self.Notifier.place(relx=0.1, rely=0.044, relheight=0.322, relwidth=0.808)
        self.Notifier.configure(relief='groove', borderwidth="2", width=485)

        self.Clock = ttk.Label(self.Notifier)
        self.Clock.place(relx=0.371, rely=0.069, height=39, width=126)
        self.Clock.configure(background="#d9d9d9", foreground="#000000", font=font11, relief='flat', anchor='center', width=126)
        self.Clock.configure(text='''00:00:00''')
        self.Clock.after(10, self.updateClock)

        
        
        self.StartTime_CE = ttk.Label(self.Notifier)
        self.StartTime_CE.place(relx=0.150, rely=0.414, height=29, width=66)
        self.StartTime_CE.configure(background="pale green", foreground="#000000", font=font13, relief='flat', width=45)
        self.StartTime_CE.configure(text="00:01")

        self.EndTime_CE = ttk.Label(self.Notifier)
        self.EndTime_CE.place(relx=0.600, rely=0.414, height=29, width=66)
        self.EndTime_CE.configure(background="pale green", foreground="#000000", font=font13, relief='flat', width=66)
        self.EndTime_CE.configure(text="11:00")

        self.CurrentEvent = ttk.Label(self.Notifier)
        self.CurrentEvent.place(relx=0.300, rely=0.414, height=29, width=140)
        self.CurrentEvent.configure(background="pale green", foreground="#000000", font=font12, relief='flat', anchor='center', width=156)
        self.CurrentEvent.configure(text="Current Event")

        self.DoneButton = ttk.Button(self.Notifier)
        self.DoneButton.place(relx=0.025, rely=0.414, height=29, width=50)
        self.DoneButton.configure(takefocus="",  width=76, command = self.doneClicked)
        self.DoneButton.configure(text='''Done''')

        self.SkipButton = ttk.Button(self.Notifier)
        self.SkipButton.place(relx=0.750, rely=0.414, height=29, width=50)
        self.SkipButton.configure(takefocus="",  width=76, command = self.skipClicked)
        self.SkipButton.configure(text='''Skip''')

        """
        self.StartButton = ttk.Button(self.Notifier)
        self.StartButton.place(relx=0.025, rely=0.414, height=29, width=50)
        self.StartButton.configure(takefocus="",  width=76)
        self.StartButton.configure(text='''Start''')
		"""
		
        self.StartTime_NE = ttk.Label(self.Notifier)
        self.StartTime_NE.place(relx=0.150, rely=0.75, height=29, width=66)
        self.StartTime_NE.configure(background="sky blue", foreground="#000000", font=font13, relief='flat',  width=66)
        self.StartTime_NE.configure(text="01:20")

        self.EndTime_NE = ttk.Label(self.Notifier)
        self.EndTime_NE.place(relx=0.600, rely=0.75, height=29, width=66)
        self.EndTime_NE.configure(background="sky blue", foreground="#000000", font=font13, relief='flat', width=66)
        self.EndTime_NE.configure(text="02:20")

        self.NextEvent = ttk.Label(self.Notifier)
        self.NextEvent.place(relx=0.300, rely=0.75, height=29, width=140)
        self.NextEvent.configure(background="sky blue", foreground="#000000", font=font12, relief='flat', anchor='center')
        self.NextEvent.configure(text="Next Event")
        self.NextEvent.configure(width=156)


        self.Scheduler = ttk.Frame(top)
        self.Scheduler.place(relx=0.1, rely=0.4, relheight=0.567, relwidth=0.808)
        self.Scheduler.configure(relief='groove', borderwidth="2", width=485)

        self.Header = ttk.Label(self.Scheduler)
        self.Header.place(relx=0.392, rely=0.039, height=29, width=107)
        self.Header.configure(background="#d9d9d9", foreground="#000000", font=font9, relief='flat', anchor='center',width=107)
        self.Header.configure(text='''Events''')

        self.StartTime_header = ttk.Label(self.Scheduler)
        self.StartTime_header.place(relx=0.082, rely=0.150, height=19, width=160)
        self.StartTime_header.configure(background="#d9d9d9", foreground="#000000", font=font10, relief='flat', width=76)
        self.StartTime_header.configure(text='''Start Time''')

        self.EndTime_header = ttk.Label(self.Scheduler)
        self.EndTime_header.place(relx=0.763, rely=0.150, height=19, width=70)
        self.EndTime_header.configure(background="#d9d9d9", foreground="#000000", font=font10, relief='flat', width=76)
        self.EndTime_header.configure(text='''End Time''')

        self.Event_header = ttk.Label(self.Scheduler)
        self.Event_header.place(relx=0.412, rely=0.150, height=23, width=170)
        self.Event_header.configure(background="#d9d9d9", foreground="#000000", font=font10, relief='flat', width=97)
        self.Event_header.configure(text='''Event Name''')

        no_of_events=len(self.schedule)

        self.eventsLables = [[ttk.Label(self.Scheduler), ttk.Label(self.Scheduler), ttk.Label(self.Scheduler)] for x in range(no_of_events)]

        for i in range(no_of_events):
            gap = 0.8/(no_of_events + 1)

            self.eventsLables[i][0].place(relx=0.082, rely=0.150 + gap*(i+1), height=23, width=160)
            self.eventsLables[i][0].configure(background="#d9d9d9", foreground="#000000", font=font13, relief='flat')
            self.eventsLables[i][0].configure(text=self.schedule[i][1])

            self.eventsLables[i][1].place(relx=0.763, rely=0.150 + gap*(i+1), height=23, width=70)
            self.eventsLables[i][1].configure(background="#d9d9d9", foreground="#000000", font=font13, relief='flat')
            self.eventsLables[i][1].configure(text=self.schedule[i][2])

            self.eventsLables[i][2].place(relx=0.412, rely=0.150 + gap*(i+1), height=23, width=170)
            self.eventsLables[i][2].configure(background="#d9d9d9", foreground="#000000", font=font13, relief='flat')
            self.eventsLables[i][2].configure(text=self.schedule[i][0])

        self.doneFlag = 0
        self.dataBase = []
        self.eNoSet = set()


    def updateClock(self):
        time=datetime.datetime.now().time()
        eNo = self.findEventNumber(time)

        if eNo == None:
            self.StartTime_CE.configure(text="00:00")
            self.EndTime_CE.configure(text="00:00")
            self.CurrentEvent.configure(text="Idle")
            nextENo = self.nextEventNumber(time)
            self.DoneButton.configure(state = 'disabled')
            self.SkipButton.configure(state = 'disabled')
            self.eNoSet.add(None)

        else:
            self.eNoSet.add(eNo)
            if None in self.eNoSet:
                self.eNoSet.remove(None)
            if len(self.eNoSet) == 2:
                self.doneFlag = 0
                self.DoneButton.configure(state = 'normal')
                self.SkipButton.configure(state = 'normal')
                self.eventsLables[list(self.eNoSet)[(list(self.eNoSet).index(eNo) + 1) % 2]][0].configure(background='gray85')
                self.eventsLables[list(self.eNoSet)[(list(self.eNoSet).index(eNo) + 1) % 2]][1].configure(background='gray85')
                self.eventsLables[list(self.eNoSet)[(list(self.eNoSet).index(eNo) + 1) % 2]][2].configure(background='gray85')
                self.eNoSet = set()
                self.eNoSet.add(eNo)

            #buzzer for Current event
            diff = abs(diff_times_in_seconds(datetime.datetime.strptime(self.schedule[eNo][2], "%H:%M").time(), time))
            if diff//60 < 10 and self.doneFlag == 0:
                T = Thread(target=playy)
                T.start()
                
                
            self.StartTime_CE.configure(text=self.schedule[eNo][1])
            self.EndTime_CE.configure(text=self.schedule[eNo][2])
            self.CurrentEvent.configure(text=self.schedule[eNo][0])

            self.eventsLables[eNo][0].configure(background="pale green")
            self.eventsLables[eNo][1].configure(background="pale green")
            self.eventsLables[eNo][2].configure(background="pale green")
            nextENo = (eNo + 1) % len(self.schedule)
        
        self.StartTime_NE.configure(text=self.schedule[nextENo][1])
        self.EndTime_NE.configure(text=self.schedule[nextENo][2])
        self.NextEvent.configure(text=self.schedule[nextENo][0])
        self.eventsLables[nextENo][0].configure(background="sky blue")
        self.eventsLables[nextENo][1].configure(background="sky blue")
        self.eventsLables[nextENo][2].configure(background="sky blue")

        self.Clock.configure(text=time.strftime("%H:%M:%S"))
        self.Clock.after(1000, self.updateClock)

    def findEventNumber(self, time):
        for i in range(len(self.schedule)):
            st=datetime.datetime.strptime(self.schedule[i][1], "%H:%M").time()
            et=datetime.datetime.strptime(self.schedule[i][2], "%H:%M").time()

            if st < time and et > time:
                return i
        return None

    def nextEventNumber(self, time):

        for i in range(len(self.schedule) - 1):
            et=datetime.datetime.strptime(self.schedule[i][2], "%H:%M").time()
            st=datetime.datetime.strptime(self.schedule[i+1][1], "%H:%M").time()

            if et < time and st > time:
                return i+1
        return 0

    def doneClicked(self):
        if self.doneFlag == 1:
            return
        self.doneFlag = 1
        time=datetime.datetime.now().time()
        eNo = self.findEventNumber(time)
        time=datetime.datetime.now()
        startTime  = self.schedule[eNo][1]
        endTime = self.schedule[eNo][2]
        name = self.schedule[eNo][0]
        timeString = time.strftime("%m/%d/%Y %I:%M %p")
        self.dataBase.append([name,startTime,endTime,timeString,'done'])
        self.DoneButton.configure(state = 'disabled')
        self.SkipButton.configure(state = 'disabled')


    def skipClicked(self):
        self.DoneButton.configure(state = 'disabled')
        self.SkipButton.configure(state = 'disabled')
        time=datetime.datetime.now().time()
        eNo = self.findEventNumber(time)
        time=datetime.datetime.now()
        startTime  = self.schedule[eNo][1]
        endTime = self.schedule[eNo][2]
        name = self.schedule[eNo][0]
        timeString = time.strftime("%m/%d/%Y %I:%M %p")
        self.dataBase.append([name,startTime,endTime,timeString,'skipped'])




            

if __name__ == '__main__':
    vp_start_gui()
